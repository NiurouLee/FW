{
	// Place your lua workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Class": {
        "prefix": "class",
        "body": [
			"--[[",
			"	$1 : ",
			"]]",
			"",
			"---@class $1: Object",
			"_class( \"$1\", Object )",
			"",
			"function $1:Constructor($2)",
			"",
			"end",
			"",
        ],
        "description": "Lua类模板"
	},

	"StaticClass": {
        "prefix": "sclass",
        "body": [
			"--[[",
			"	$1 : ",
			"]]",
			"",
			"---@class $1: Singleton",
			"---@field GetInstance $1",
			"_class( \"$1\", Singleton )",
			"",
			"",
			"function $1:Constructor()",
			"",
			"end",
			"",
        ],
        "description": "Lua单例类模板"
	},
	
	"EmmyParaType": {
        "prefix": "--p",
        "body": [
			"---@param $1 $2",
        ],
        "description": "参数注释"
	},

	"EmmyReturnType": {
        "prefix": "--r",
        "body": [
			"---@return $0",
        ],
        "description": "返回值注释"
	},

	"EmmyLocalType": {
        "prefix": "--t",
        "body": [
			"---@type $0",
        ],
        "description": "变量注释"
	},

	"ClassSegment": {
        "prefix": "/as",
        "body": [
			"-- As $1:",
			"--//////////////////////////////////////////////////////////",
			"",
        ],
        "description": "段落注释"
	},

	"LuaEnum": {
        "prefix": "enum",
        "body": [
			"---@class $1",
			"_enum(\"$1\", {",
			"	Invalid = 0,",
			"})",
        ],
        "description": "段落注释"
	},

	"EntityComponent": {
        "prefix": "ecmpt",
        "body": [
			"--[[",
			"	$1Component : ",
			"]]",
			"",
			"---@class $1Component: Object",
			"_class( \"$1Component\", Object )",
			"",
			"function $1Component:Constructor($2)",
			"",
			"end",
			"",
			"",
			"---@param owner Entity",
			"function $1Component:WEC_PostInitialize(owner)",
			"	--ToDo WEC_PostInitialize",
			"end",
			"",
			"function $1Component:WEC_PostRemoved()",
			"	--Do WEC_PostRemoved",
			"end",
			"",
			"",
			"",
			"--[[",
			"	Entity Extensions",
			"]]",
			"---@return $1Component",
			"function Entity:$1()",
			"	return self:GetComponent(self.WEComponentsEnum.$1)",
			"end",
			"",
			"",
			"function Entity:Has$1()",
			"	return self:HasComponent(self.WEComponentsEnum.$1)",
			"end",
			"",
			"",
			"function Entity:Add$1($2)",
			"	local index = self.WEComponentsEnum.$1;",
			"	local component = $1Component:New($2)",
			"	self:AddComponent(index, component)",
			"end",
			"",
			"",
			"function Entity:Replace$1($2)",
			"	local index = self.WEComponentsEnum.$1;",
			"	local component = $1Component:New($2)",
			"	self:ReplaceComponent(index, component)",
			"end",
			"",
			"",
			"function Entity:Remove$1()",
			"	if self:Has$1() then",
			"		self:RemoveComponent(self.WEComponentsEnum.$1)",
			"	end",
			"end",
        ],
        "description": "插入Entity组件代码模板"
	},
	
	"WorldComponent": {
        "prefix": "wcmpt",
        "body": [
			"--[[",
			"	$1Component : ",
			"]]",
			"",
			"---@class $1Component: Object",
			"_class( \"$1Component\", Object )",
			"",
			"---@param world World",
			"function $1Component:Constructor(world)",
			"",
			"end",
			"",
			"function $1Component:Initialize($2)",
			"end",
			"",
			"-- This:",
			"--//////////////////////////////////////////////////////////",
			"",
			"",
			"--[[",
			"	BaseWorld Extensions",
			"]]",
			"---@return $1Component",
			"function BaseWorld:$1()",
			"	return self:GetUniqueComponent(WUniqueComponentsEnum.$1)",
			"end",
			"",
			"",
			"function BaseWorld:Has$1()",
			"	return self:GetUniqueComponent(WUniqueComponentsEnum.$1) ~= nil",
			"end",
			"",
			"",
			"function BaseWorld:Add$1($2)",
			"	local index = WUniqueComponentsEnum.$1;",
			"	local component = $1Component:New(world)",
			"	component:Initialize($2)",
			"	self:SetUniqueComponent(index, component)",
			"end",
			"",
			"",
			"function BaseWorld:Remove$1()",
			"	if self:Has$1() then",
			"		self:SetUniqueComponent(index, nil)",
			"	end",
			"end",
        ],
        "description": "插入World组件代码模板"
	},
	
	"RSystem": {
        "prefix": "rsys",
        "body": [
			"--[[",
				"	$1System : ",
			"]]",
			"",
			"---@class $1System: ReactiveSystem",
			"_class( \"$1System\", ReactiveSystem )",
			"",
			"function $1System:Constructor(world)",
			"	self.world = world",
			"end",
			"",
			"function $1System:GetTrigger(world)",
			"	local group = world:GetGroup(world.BW_WEMatchers.$2)",
			"	local c = Collector:New({ group }, {\"Added\"})",
			"	return c",
			"end",
			"",
			"---@param entity Entity",
			"function $1System:Filter(entity)",
			"	return entity:Has$2()",
			"end",
			"",
			"function $1System:ExecuteEntities(entities)",
			"	for i = 1, #entities do",
			"		local e = entities[i]",
			"		self:HandleEntity(e)",
			"	end",
			"end",
			"",
			"---@param e Entity",
			"function $1System:HandleEntity(e)",
			"end",
        ],
        "description": "Lua类模板"
	},

	"AINode": {
        "prefix": "ainode",
        "body": [
			"--[[",
				"AI$1State : ",
			"]]",
			"require \"ai_state_node\"",
			"",
			"---@param cfg table",
			"function CustomNodeConfigStatic.Check_AI$1State(cfg)",
			"	return false",
			"end",
			"CustomNodeConfigStatic.AddChecker(\"AI$1State\", CustomNodeConfigStatic.Check_AI$1State)",
			"",
			"---@class AI$1State: AIStateNode",
			"_class( \"AI$1State\", AIStateNode )",
			"",
			"function AI$1State:InitializeNode(cfg, context)",
				"AI$1State.super.InitializeNode(self, cfg, context)", 
			"end",
			"",
			"function AI$1State:Enter()",
				"AI$1State.super.Enter(self)",
			"end",
			"",
			"function AI$1State:Exit()",
				"AI$1State.super.Exit(self)",
			"end",
			"",
			"function AI$1State:CheckTransitions()",
				"--your check logic ",
				"",
				"return AI$1State.super.CheckTransitions(self)",
			"end",
			"",
			"function AI$1State:Update(dt)",
				"AI$1State.super.Update(dt)",
			"end",
        ],
        "description": "ai节点"
	},
}